version: "3.9"

services:
  postgresql:
    image: docker.io/library/postgres:16.2
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]
    networks:
      - authentik
  redis:
    image: docker.io/library/redis:7.2.4
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]
    networks:
      - authentik
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.4.1}
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - media:/media
      - custom-templates:/templates
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]
    networks:
      - authentik
        - tunnel
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      - postgresql
      - redis
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.4.1}
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]
    networks:
      - authentik
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - media:/media
      - certs:/certs
      - custom-templates:/templates
    depends_on:
      - postgresql
      - redis
networks:
  authentik:
    driver: overlay
    attachable: true
  tunnel:
    external: true

volumes:
  database:
    driver_opts:
      type: "nfs"
      o: addr="IP-of-NAS",nolock,soft,rw
      device: ":/volume1/swarm/authentik/database"

  redis:
    driver_opts:
      type: "nfs"
      o: addr="IP-of-NAS",nolock,soft,rw
      device: ":/volume1/swarm/authentik/redis"
  media:
    driver_opts:
      type: "nfs"
      o: addr="IP-of-NAS",nolock,soft,rw
      device: ":/volume1/swarm/authentik/media"

  certs:
    driver_opts:
      type: "nfs"
      o: addr="IP-of-NAS",nolock,soft,rw
      device: ":/volume1/swarm/authentik/certs"

  custom-templates:
    driver_opts:
      type: "nfs"
      o: addr="IP-of-NAS",nolock,soft,rw
      device: ":/volume1/swarm/authentik/custom-templates"