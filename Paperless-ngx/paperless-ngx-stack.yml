# Docker Compose file for running paperless from the docker container registry.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8000.
#
# In addition to that, this Docker Compose file adds the following optional
# configurations:
#
# - Instead of SQLite (default), PostgreSQL is used as the database server.
# - Apache Tika and Gotenberg servers are started with paperless and paperless
#   is configured to use these services. These provide support for consuming
#   Office documents (Word, Excel, Power Point and their LibreOffice counter-
#   parts.
#
# To install and update paperless with this file, do the following:
#
# - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'
#   and '.env' into a folder.
# - Run 'docker compose pull'.
# - Run 'docker compose run --rm webserver createsuperuser' to create a user.
# - Run 'docker compose up -d'.
#
# For more extensive installation and update instructions, refer to the
# documentation.

version: "3.9"
services:
  broker:
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - redisdata:/data
    networks:
      - internal

  db:
    image: docker.io/library/postgres:15
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD_FILE: /run/secrets/paperless_db_pass
    secrets:
      - paperless_db_pass
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]
    networks:
      - internal


  db-backup:
    image: docker.io/library/postgres:15
    volumes:
      - pgbackup:/dump
      - /etc/localtime:/etc/localtime:ro
    environment:
      PGHOST: db
      PGDATABASE: paperless
      PGUSER: paperless
      PGPASSWORD_FILE: /run/secrets/paperless_db_pass
      BACKUP_NUM_KEEP: 7
      BACKUP_FREQUENCY: 1d
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]
    networks:
      - internal
    secrets:
     - paperless_db_pass
    entrypoint: |
      bash -c 'bash -s <<EOF
      trap "break;exit" SIGHUP SIGINT SIGTERM
      sleep 2m
      while /bin/true; do
        pg_dump -Fc > /dump/dump_\`date +%d-%m-%Y"_"%H_%M_%S\`.psql
        (ls -t /dump/dump*.psql|head -n $$BACKUP_NUM_KEEP;ls /dump/dump*.psql)|sort|uniq -u|xargs rm -- {}
        sleep $$BACKUP_FREQUENCY
      done
      EOF'

  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - db
      - broker
      - gotenberg
      - tika
    ports:
      - "8101:8000"
    networks:
      - internal

    volumes:
      - data:/usr/src/paperless/data
      - media:/usr/src/paperless/media
      - export:/usr/src/paperless/export
      - consume:/usr/src/paperless/consume
    env_file: docker-compose.env
    deploy:
      replicas: 1
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]


  gotenberg:
    image: docker.io/gotenberg/gotenberg:7.10
    restart: unless-stopped

    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]
    networks:
      - internal


  tika:
    image: ghcr.io/paperless-ngx/tika:latest
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]
    networks:
      - internal

volumes:
  data:
    driver_opts:
      type: "nfs"
      o: addr="IP-of-NAS",nolock,soft,rw
      device: ":/volume1/swarm/paperless/data"
  media:
    driver_opts:
      type: "nfs"
      o: "addr="IP-of-NAS",nolock,soft,rw"
      device: ":/volume1/swarm/paperless/media"
  pgdata:
    driver_opts:
      type: "nfs"
      o: "addr="IP-of-NAS",nolock,soft,rw"
      device: ":/volume1/swarm/paperless/pgdata"
  redisdata:
    driver_opts:
      type: "nfs"
      o: "addr="IP-of-NAS",nolock,soft,rw"
      device: ":/volume1/swarm/paperless/redisdata"
  pgbackup:
    driver_opts:
      type: "nfs"
      o: "addr="IP-of-NAS",nolock,soft,rw"
      device: ":/volume1/swarm/paperless/pgbackup"
  consume:
    driver_opts:
      type: "nfs"
      o: "addr="IP-of-NAS",nolock,soft,rw"
      device: ":/volume1/swarm/paperless/consume"
  export:
    driver_opts:
      type: "nfs"
      o: "addr="IP-of-NAS",nolock,soft,rw"
      device: ":/volume1/swarm/paperless/export"

secrets:
  paperless_db_pass:
    external: true
  paperless_user_pass:
    external: true

networks:
  internal:
    driver: overlay
    ipam:
      config:
        - subnet: 172.16.58.0/24